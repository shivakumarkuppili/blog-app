const express =require('express');
const cors=require('cors');
const bcrypt=require('bcryptjs');
const Post =require('./models/Post')
const User=require('./models/User');
const jwt=require('jsonwebtoken');
const cookieparser =require('cookie-parser');
const multer=require('multer');
const { default: mongoose } = require('mongoose');
const app=express();
const fs=require('fs');
const uploadmiddleware=multer({dest:'uploads/'});
app.use('/uploads',express.static(__dirname+'/uploads'));

app.use(cors({credentials:true,origin:'http://localhost:3000'}));
app.use(express.json());
app.use(cookieparser());
mongoose.connect('mongodb+srv://shivatony:IhtoALWiqdGIjxsx@cluster0.su8qy7u.mongodb.net/');
const salt=bcrypt.genSaltSync(10);
const secret='lwiufiuguy1234998hytfuhybkshdfgv94tkjnkihybsgv';
app.post('/register',async(req,res)=>{
    const {username,password,email}=req.body;
    try {
        const userdoc= await User.create({
            username,
            password:bcrypt.hashSync(password,salt)
            ,email})
        res.json(userdoc);
        
    } catch (error) {
        res.status(400).json(error);
    }
    
});


app.post('/login',async(req,res)=>{
    const {username,password}=req.body;
    const userdoc = await User.findOne({username});
    if(userdoc === null){
        res.status(400).json('wrong credentials')
    }else{
    const passok=bcrypt.compareSync(password,userdoc.password);
    if(passok){
        //jwt.sign is used to generate token
        jwt.sign({username,id:userdoc.id},secret,{},(err,token)=>{   //here 'token' holds the  cookie or token that is generated by jwt.sign
                                                                    
            if (err) throw err;
            res.cookie('token',token).json({
                id:userdoc._id,
                username,
            });

        });
    }
    else{
        res.status(400).json('wrong credentials');
    }}

});
app.get('/profile',(req,res)=>{
    const {token} = req.cookies;//jwt.verify: This is a function  used to verify the authenticity of a JWT token.'token' This is the JWT token that needs to be verified.
    jwt.verify(token,secret,{},(err,info)=>{
        if(err) throw err;
        res.json(info);
    });
});
app.post('/logout',(req,res)=>{
    res.cookie('token','').json('ok');
});

app.post('/post',uploadmiddleware.single('file'),async (req,res)=>{
  const {originalname,path}=req.file;
  const parts = originalname.split('.');
  const ext=parts[parts.length-1];
  const newpath =path+'.'+ext;   
  fs.renameSync(path,path+'.'+ext)

  const {token} = req.cookies;//jwt.verify: This is a function  used to verify the authenticity of a JWT token.'token' This is the JWT token that needs to be verified.
  jwt.verify(token,secret,{},async (err,info)=>{
    if(err) throw err;
    const {title,summary,content} = req.body;
    const postdoc = await Post.create({title,summary,content,cover:newpath,author:info.id,});

    res.json(postdoc);

    
    });

  
});
app.put('/post',uploadmiddleware.single('file'),async(req,res)=>{
    let newpath = null;
    if(req.file){
        const {originalname,path}=req.file;
        const parts = originalname.split('.');
        const ext=parts[parts.length-1];
        newpath=path+'.'+ext;
        fs.renameSync(path,newpath);
    }
    const {token} = req.cookies;
    jwt.verify(token,secret,{},async (err,info)=>{
        if(err) throw err;
        const {id,title,summary,content} = req.body;
        const postdoc=await Post.findById(id); 
        const isauthor= JSON.stringify(postdoc.author) === JSON.stringify(info.id);
       if(!isauthor){
        return res.status(400).json('you are not the author');
       }

        
     await postdoc.updateOne({title,summary,content,cover: newpath?newpath:postdoc.cover,});
    
        res.json(postdoc);
    
        
        });
    
});

app.get('/post',async (req,res)=>{
    
    res.json(await Post.find().populate('author',['username']).sort({createdAt:-1}).limit(20));
});
app.get('/post/:id',async (req,res)=>{
    const {id} = req.params;
    const postdoc = await Post.findById(id).populate('author',['username']);
    res.json(postdoc);

})
app.listen(4000);
